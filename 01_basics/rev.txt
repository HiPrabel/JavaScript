ğŸ“Œ 1. Data Types & Typeof Exceptions
Primitive Data Types (Stored in stack, immutable)
âœ” Number, String, Boolean, BigInt, Symbol, null, undefined

Non-Primitive (Reference) Data Types (Stored in heap)
âœ” Object, Array, Function

ğŸ”´ Typeof Exceptions
Expression	     Output	        Explanation
typeof null	    "object"	Bug in JS (should be null)
typeof NaN	    "number"	NaN is a special number
typeof []	    "object"	Arrays are objects
typeof () {}	"function"	Functions are a type of object
typeof 123n	    "bigint"	BigInt type

ğŸ“Œ 2. Type Conversion
ğŸ”„ String to Number
âœ” Number("33") â†’ 33
âœ” Number("33abc") â†’ NaN
âœ” parseInt("33.9") â†’ 33

ğŸ”„ Boolean Conversion
âœ” Boolean(1) â†’ true, Boolean(0) â†’ false
âœ” Boolean("") â†’ false, Boolean("hello") â†’ true
âœ” Boolean(null) â†’ false, Boolean(undefined) â†’ false

ğŸ”„ Number to String
âœ” String(42) â†’ "42"
âœ” (42).toString() â†’ "42"

ğŸ“Œ 3. Operators & Edge Cases
Arithmetic Operators
âœ” 2 + 2, 2 - 2, 2 * 2, 2 ** 3 (Exponentiation)
âœ” 10 / 3 â†’ 3.333 (Floating point division)
âœ” 10 % 3 â†’ 1 (Modulo)

String Concatenation Rules
âœ” "1" + 2 + 2 â†’ "122" (String first, everything becomes string)
âœ” 1 + 2 + "2" â†’ "32" (Numbers first, then string)
âœ” +"" â†’ 0 (Unary + converts empty string to number)
âœ” +true â†’ 1, +false â†’ 0

ğŸ“Œ 4. Comparison & Edge Cases
âœ” console.log(2 > 1); â†’ true
âœ” "2" == 2 â†’ true (Type coercion)
âœ” "2" === 2 â†’ false (Strict comparison, no coercion)
âœ” null > 0 â†’ false
âœ” null == 0 â†’ false
âœ” null >= 0 â†’ true (Comparison converts null to 0)

ğŸ“Œ 5. Strings & Methods
âœ” str.length, str.toUpperCase(), str.toLowerCase()
âœ” "hello".charAt(1) â†’ 'e'
âœ” "hello".indexOf('l') â†’ 2
âœ” "hello".slice(1,3) â†’ "el" (Supports negative index)
âœ” " hello ".trim() â†’ "hello" (Removes spaces)
âœ” "Peter_Parker".replace('_', ' ') â†’ "Peter Parker"
âœ” "apple is a fruit".split(' ') â†’ ["apple", "is", "a", "fruit"]

ğŸ“Œ 6. Numbers & Math
âœ” 100..toString() â†’ "100"
âœ” (123.456).toFixed(2) â†’ "123.46"
âœ” (123.456).toPrecision(3) â†’ "123"
âœ” 1000000.toLocaleString('en-IN') â†’ "10,00,000"

Math Methods
âœ” Math.abs(-6.5) â†’ 6.5
âœ” Math.round(6.5) â†’ 7
âœ” Math.ceil(6.2) â†’ 7
âœ” Math.floor(6.9) â†’ 6
âœ” Math.min(1,4,8) â†’ 1, Math.max(1,4,8) â†’ 8
âœ” Math.random() â†’ Random between 0-1
âœ” Math.floor(Math.random() * (max - min + 1)) + min â†’ Random between min & max

ğŸ“Œ 7. Dates & Time
âœ” let d = new Date(); â†’ Current date & time
âœ” new Date(2023, 0, 15); â†’ Jan 15, 2023
âœ” new Date("2023-04-14"); â†’ Apr 14, 2023
âœ” Date.now() â†’ Timestamp (ms since 1970)
âœ” Math.round(Date.now() / 1000) â†’ Timestamp in seconds

Date Methods
âœ” date.getFullYear(), date.getMonth() + 1 (Months start from 0)
âœ” date.getDay() â†’ 0 (Sunday) to 6 (Saturday)
âœ” date.toLocaleString('default', { weekday: "long" }) â†’ "Sunday"

ğŸ“Œ 8. Special Questions & Exceptions
Concept	            	        Answer
typeof null		        "object" (Bug in JS)
typeof NaN	            "number" (NaN is a special number)
0 == "0"	            true (Type coercion)
null == undefined	    true (Both are falsy)
null === undefined	    false (Strict comparison)
true + true		        2 (1 + 1)
[] == []		        false (Different memory references)
{} + []		            0 (Weird type coercion)
[] + {}		            "[object Object]" (String conversion)

ğŸš€ Quick Tips 
âœ… Primitive vs Non-Primitive: Primitive (Stack), Non-Primitive (Heap)
âœ… Falsy Values: 0, "", null, undefined, NaN, false
âœ… Strict vs Loose Equality: === (No coercion), == (Coercion)
âœ… Math.random() formula: (Math.random() * (max - min + 1)) + min
âœ… JavaScript has Automatic Type Conversion (Implicit Coercion)
âœ… null behaves weirdly in comparisons (null >= 0 is true but null > 0 is false)